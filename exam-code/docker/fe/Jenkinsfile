pipeline {
    agent {
        docker {
            image 'python:3.12'
        }
    }
    environment {
        DOCKERHUB_CREDENTIALS = credentials('docker-hub-creds')
        DOCKER_REGISTRY = 'ackermaster'
        REPO_NAME = 'fe-exam'  // Change to 'be-exam' for backend pipeline
        IMAGE_TAG = "${env.BUILD_NUMBER}"
        
    }
    stages {

         stage('Prepare Environment') {
            steps {
                sh '''
                    apt-get update && apt-get install -y docker.io curl
                    docker --version
                '''
            }
        }
        
        stage('Clone Repository') {
            steps {
                git branch: 'workshop/argo-jenkins-exam', url: 'https://github.com/AckerMaster/devopshift-welcome.git'
            }
        }

       

        stage('Lint & Security Scan') {
            parallel{

                stage('Flake8 Linting'){
                    steps{
                        dir('exam-code/docker/fe/src'){
                            sh "pip install flake8"
                            sh "flake8 . || true"
                        }
                    }
                } 

                stage('Bandit Security Scan'){
                    steps{
                        dir('exam-code/docker/fe/src'){
                            sh "pip install bandit"
                            sh "bandit -r . || true"
                        }
                    }
                }           
            }
        }
        
        stage('Install Dependencies'){
            steps{
                dir('exam-code/docker/fe'){
                    sh "pip install -r requirements.txt"
                }
            }
        }

        stage('Build Docker Image'){
            steps{
                dir('exam-code/docker/fe'){
                    sh """
                    docker build -t ${DOCKER_REGISTRY}/${REPO_NAME}:$BUILD_NUMBER .
                    docker tag ${DOCKER_REGISTRY}/${REPO_NAME}:$BUILD_NUMBER ${DOCKER_REGISTRY}/${REPO_NAME}:latest
                    """
                }
            }
        }

        stage('Run Tests in Container'){
            steps{
                sh "docker run --rm ${DOCKER_REGISTRY}/${REPO_NAME}:$BUILD_NUMBER pytest tests/"
            }
        }

        // stage('Integration Test with Docker Compose'){
        //     steps{
        //         dir('exam-code/docker'){
        //             sh """
        //             docker-compose up -d
        //             sleep 10
        //             curl -f http://localhost:5002 || exit 1
        //             docker-compose down
        //             """
        //         }
        //     }
        // }

         stage('Push to Docker Hub'){
            steps{
                sh "echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin"
                sh "docker push ${DOCKER_REGISTRY}/${REPO_NAME}:$BUILD_NUMBER"
                sh "docker push ${DOCKER_REGISTRY}/${REPO_NAME}:latest"
            }
        }

    }


    post {
        always {
            sh 'docker logout'
        }
    }
}